<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lihongda&#39;s Blog</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihongda.net/"/>
  <updated>2018-08-29T08:40:28.369Z</updated>
  <id>http://lihongda.net/</id>
  
  <author>
    <name>Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NGINX02</title>
    <link href="http://lihongda.net/2018/08/29/NGINX02/"/>
    <id>http://lihongda.net/2018/08/29/NGINX02/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T08:40:28.369Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/29/NGINX02/nginx.png" alt="nginx"> </p><a id="more"></a><h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><blockquote><ul><li>Nginx：engine X ，2002年，开源，商业版</li><li>NGINX是免费，开源，高性能的HTTP和反向代理服务器，邮件代理服&gt;&gt; 务器，通用TCP/UDP代理服务器</li><li>解决C10K问题（10K Connections）</li><li>官网：<a href="http://nginx.org" target="_blank" rel="noopener">http://nginx.org</a></li><li>二次开发版：Tengine OpenResty（章亦春）</li></ul></blockquote><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><ul><li>模块化设计，较好的扩展性</li><li>高可靠性</li><li>支持热部署：不停机更新配置文件，升级版本，更换日志文件</li><li>低内存消耗：10000个keep-alive连接模式下的非活动连接，仅需2.5M内存</li><li>event-driven,aio,mmap，sendfile</li></ul><h3 id="基本功能："><a href="#基本功能：" class="headerlink" title="基本功能："></a>基本功能：</h3><ul><li>静态资源的web服务器</li><li>http协议反向代理服务器</li><li>pop3/imap4协议反向代理服务器</li><li>FastCGI(LNMP),uWSGI(python)等协议</li><li>模块化（非DSO），如zip，SSL模块</li></ul><h3 id="web服务相关的功能："><a href="#web服务相关的功能：" class="headerlink" title="web服务相关的功能："></a>web服务相关的功能：</h3><blockquote><p>虚拟主机（server）<br>支持 keep-alive 和管道连接<br>访问日志（支持基于日志缓冲提高其性能）<br>url rewirte<br>路径别名<br>基于IP及用户的访问控制<br>支持速率限制及并发数限制<br>重新配置和在线升级而无须中断客户的工作进程<br>Memcached 的 GET 接口</p></blockquote><h2 id="Nginx架构"><a href="#Nginx架构" class="headerlink" title="Nginx架构"></a>Nginx架构</h2><p><img src="/2018/08/29/NGINX02/Nginx架构.png" alt="Nginx架构"></p><h2 id="nginx的程序架构"><a href="#nginx的程序架构" class="headerlink" title="nginx的程序架构"></a>nginx的程序架构</h2><h4 id="nginx的程序架构："><a href="#nginx的程序架构：" class="headerlink" title="nginx的程序架构："></a>nginx的程序架构：</h4><h5 id="master-worker结构"><a href="#master-worker结构" class="headerlink" title="master/worker结构"></a>master/worker结构</h5><ul><li>一个master进程：<ul><li>负载加载和分析配置文件、管理worker进程、平滑升级</li></ul></li><li>一个或多个worker进程<ul><li>处理并响应用户请求</li></ul></li><li>缓存相关的进程：<ul><li>cache loader：载入缓存对象</li><li>cache manager：管理缓存对象</li></ul></li></ul><h3 id="nginx模块"><a href="#nginx模块" class="headerlink" title="nginx模块"></a>nginx模块</h3><ul><li><p>nginx高度模块化，但其模块早期不支持DSO机制；1.9.11版本支持动态装载和卸载</p></li><li><p>模块分类：</p><ul><li><p>核心模块：core module</p></li><li><p>标准模块：</p><ul><li>HTTP 模块:ngx_http_*<ul><li>HTTP Core modules 默认功能</li><li>HTTP Optional modules 需编译时指定</li></ul></li><li>Mail 模块 ngx_mail_*</li><li>Stream 模块 ngx_stream_*</li></ul></li><li><p>第三方模块</p></li></ul></li></ul><h3 id="nginx目录结构和命令"><a href="#nginx目录结构和命令" class="headerlink" title="nginx目录结构和命令"></a>nginx目录结构和命令</h3><p><code>ls /usr/local/nginx/</code> html是测试页，sbin是主程序<br><code>s /usr/local/nginx/sbin/</code> nginx 只有一个程序文件<br><code>ls /usr/local/nginx/html/</code> 50x.html index.html 测试网页</p><ul><li><p>Nginx：默认为启动nginx</p><ul><li>-h 查看帮助选项</li><li>-V 查看版本和配置选项</li><li>-t 测试nginx语法错误</li><li>-c filename 指定配置文件(default: /etc/nginx/nginx.conf)</li><li>-s signal 发送信号给master进程，signal：stop, quit, reopen, reload<br>示例： <code>nginx -s stop</code> 停止nginx <code>nginx -s reload</code> 加载配置文件 <code>-g directives</code> 在命令行中指明全局指令</li></ul></li></ul><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul><li>配置文件的组成部分：<ul><li>主配置文件：nginx.conf</li><li>子配置文件 include conf.d/*.conf</li><li>fastcgi， uwsgi，scgi等协议相关的配置文件</li><li>mime.types：支持的mime类型</li></ul></li><li>主配置文件的配置指令：<ul><li>directive value [value2 …];</li></ul></li><li>注意：<ul><li>(1) 指令必须以分号结尾</li><li>(2) 支持使用配置变量<ul><li>内建变量：由Nginx模块引入，可直接引用</li><li>自定义变量：由用户使用set命令定义 set variable_name value;</li><li>引用变量：$variable_name</li></ul></li></ul></li></ul><h3 id="主配置文件结构：四部"><a href="#主配置文件结构：四部" class="headerlink" title="主配置文件结构：四部"></a>主配置文件结构：四部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">main block：主配置段，即全局配置段，对http,mail都有效</span><br><span class="line"></span><br><span class="line">event &#123;</span><br><span class="line">...</span><br><span class="line">&#125; 事件驱动相关的配置</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">&#125; http/https 协议相关配置段</span><br><span class="line"></span><br><span class="line">mail &#123;</span><br><span class="line">...</span><br><span class="line">&#125; mail 协议相关配置段</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">...</span><br><span class="line">&#125; stream 服务器相关配置段</span><br></pre></td></tr></table></figure><h3 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">... 各server的公共配置</span><br><span class="line">server &#123; 每个server用于定义一个虚拟主机</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">server &#123; </span><br><span class="line">...</span><br><span class="line">server_name 虚拟主机名</span><br><span class="line">root 主目录</span><br><span class="line">alias 路径别名</span><br><span class="line">location [OPERATOR] URL &#123; 指定URL的特性</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> CONDITION &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>帮助文档 <a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></p><p>模块加载配置文件：<code>/usr/share/nginx/modules/*.conf</code></p><p>指明要装载的动态模块路径: <code>/usr/lib64/nginx/modules</code></p><h3 id="性能优化相关的配置"><a href="#性能优化相关的配置" class="headerlink" title="性能优化相关的配置"></a>性能优化相关的配置</h3><p>1、worker_processes number | auto   </p><ul><li>worker进程的数量；通常应该为当前主机的cpu的物理核心数</li></ul><p>2、worker_cpu_affinity cpumask …</p><ul><li>worker_cpu_affinity auto [cpumask] 提高缓存命中率<ul><li>CPU MASK： 00000001：0号CPU</li><li>00000010：1号CPU</li><li>10000000：8号CPU</li></ul></li><li>worker_cpu_affinity 0001 0010 0100 1000;</li><li>worker_cpu_affinity 0101 1010;  </li></ul><p>3、worker_priority number</p><ul><li>指定worker进程的nice值，设定worker进程优先级：[-20,20]  </li></ul><p>4、worker_rlimit_nofile number</p><ul><li>worker进程所能够打开的文件数量上限,如65535</li></ul><h3 id="事件驱动相关的配置"><a href="#事件驱动相关的配置" class="headerlink" title="事件驱动相关的配置"></a>事件驱动相关的配置</h3><ul><li>worker_connections number  </li></ul><blockquote><p>每个worker进程所能够打开的最大并发连接数数量，如10240<br>总最大并发数：worker_processes * worker_connections   </p></blockquote><ul><li>use method   </li></ul><blockquote><p>指明并发连接请求的处理方法,默认自动选择最优方法  use epoll;  </p></blockquote><ul><li>accept_mutex on | off 互斥  </li></ul><blockquote><p>处理新的连接请求的方法；on指由各个worker轮流处理新请求，Off指每个新请<br>求的到达都会通知(唤醒)所有的worker进程，但只有一个进程可获得连接，造成“惊<br>群”，影响性能</p></blockquote><h4 id="调试和定位选项"><a href="#调试和定位选项" class="headerlink" title="调试和定位选项"></a>调试和定位选项</h4><ul><li>daemon on|off 是否以守护进程方式运行nignx，默认是守护进程方式</li><li>master_process on|off是否以master/worker模型运行nginx；默认为on off 将不启动worker</li><li>error_log file [level] 错误日志文件及其级别；出于调试需要，可设定为debug；但debug仅在编译时使用了“–with-debug”选项时才/有效</li><li>level:debug|info|notice|warn|error|crit|alter|emerg</li></ul><h4 id="ngx-http-core-module"><a href="#ngx-http-core-module" class="headerlink" title="ngx_http_core_module"></a>ngx_http_core_module</h4><p>1、server { … }</p><p>配置一个虚拟主机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen address[:PORT]|PORT;</span><br><span class="line">server_name SERVER_NAME;</span><br><span class="line">root /PATH/TO/DOCUMENT_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE</p><p>listen address[:port] [default_server] [ssl] [http2 | spdy] [backlog=number] [rcvbuf=size] [sndbuf=size]</p><ul><li>default_server 设定为默认虚拟主机</li><li>ssl 限制仅能够通过ssl连接提供服务</li><li>backlog=number 超过并发连接数后，新请求进入后援队列的长度</li><li>rcvbuf=size 接收缓冲区大小</li><li>sndbuf=size 发送缓冲区大小</li></ul><p>注意：<br>(1) 基于port；listen PORT; 指令监听在不同的端口<br>(2) 基于ip的虚拟主机 listen IP:PORT; IP 地址不同<br>(3) 基于hostname server_name fqdn; 指令指向不同的主机名</p><p>3、server_name name …;</p><blockquote><p>虚拟主机的主机名称后可跟多个由空白字符分隔的字符串<br>支持通配任意长度的任意字符 <code>server_name *.magedu.com www.magedu.*</code><br>支持~起始的字符做正则表达式模式匹配，性能原因慎用<code>server_name ~^www\d+\.magedu\.com$</code><br>说明： \d 表示 [0-9]<br>匹配优先级机制从高到低：<br>(1) 首先是字符串精确匹配 如：<a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a><br>(2) 左侧<em>通配符 如：</em>.magedu.com<br>(3) 右侧<em>通配符 如：<a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em><br>(4) 正则表达式 如： ~^.*.magedu.com$<br>(5) default_server</p></blockquote><p>4、tcp_nodelay on | off;</p><blockquote><p>在keepalived模式下的连接是否启用TCP_NODELAY选项<br>当为off时，延迟发送，合并多个请求后再发送<br>默认On时，不延迟发送<br>可用于：http, server, location</p></blockquote><p>5、sendfile on | off;</p><blockquote><p>是否启用sendfile功能，在内核中封装报文直接发送,默认Off</p></blockquote><p>6、server_tokens on | off | build | string</p><blockquote><p>是否在响应报文的Server首部显示nginx版本 ngx_http_core_modu</p></blockquote><p>7、root</p><blockquote><p>设置web资源的路径映射；用于指明请求的URL所对应的文档的目录路径，可用于http, server, location, if in location  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">root /data/www/vhost1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、location [ = | ~ | ~* | ^~ ] uri { … }</p><p>location @name { … }</p><blockquote><p>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路<br>径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最<br>佳匹配，而后应用其配置</p></blockquote><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;...</span><br><span class="line">    server_name www.magedu.com;</span><br><span class="line">    location /images/ &#123;</span><br><span class="line">        root /data/imgs/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>^~： 对URI的最左边部分做匹配检查，不区分字符大小写<br>~： 对URI做正则表达式模式匹配，区分字符大小写<br>~*： 对URI做正则表达式模式匹配，不区分字符大小写<br>不带符号：匹配起始于此uri的所有的uri<br>匹配优先级从高到低：=, ^~, ～/～*, 不带符号</p></blockquote><p>9、alias path;</p><blockquote><p>路径别名，文档映射的另一种机制；仅能用于location上下文  </p></blockquote><p>示例：<br><a href="http://www.magedu.com/bbs/index.php" target="_blank" rel="noopener">http://www.magedu.com/bbs/index.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /bbs/ &#123;</span><br><span class="line">alias /web/forum/;</span><br><span class="line">&#125; --&gt; /web/forum/index.html</span><br><span class="line">location /bbs/ &#123;</span><br><span class="line">root /web/forum/;</span><br><span class="line">&#125; --&gt; /web/forum/bbs/index.html</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：location中使用root指令和alias指令的意义不同<br>(a) root，给定的路径对应于location中的/uri/左侧的/<br>(b) alias，给定的路径对应于location中的/uri/右侧的/</p></blockquote><p>10、index file …;</p><blockquote><p>指定默认网页文件，注意：ngx_http_index_module模块</p></blockquote><p>11、error_page code … [=[response]] uri;</p><blockquote><p>模块：ngx_http_core_module<br>定义错误页，以指定的响应状态码进行响应<br>可用位置：http, server, location, if in location<br>error_page 404 /404.html<br>error_page 404 =200 /404.html</p></blockquote><p>12、try_files file … uri;</p><blockquote><p>try_files file … =code;<br>按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123; </span><br><span class="line">try_files $uri /images/default.gif; </span><br><span class="line">&#125;</span><br><span class="line">location / &#123; </span><br><span class="line">try_files $uri $uri/index.html $uri.html =404; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、keepalive_timeout timeout [header_timeout];</p><blockquote><p>设定保持连接超时时长，0表示禁止长连接，默认为75s</p></blockquote><p>14、keepalive_requests number;</p><blockquote><p>在一次长连接上所允许请求的资源的最大数量,默认为100</p></blockquote><p>15、keepalive_disable none | browser …</p><blockquote><p>对哪种浏览器禁用长连接</p></blockquote><p>16、send_timeout time;</p><blockquote><p>向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长</p></blockquote><p>17、client_body_buffer_size size;</p><blockquote><p>用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由下面client_body_temp_path指令所定义的位置</p></blockquote><p>18、client_body_temp_path path [level1 [level2 [level3]]];</p><blockquote><p>设定存储客户端请求报文的body部分的临时存储路径及子目录结构和数量<br>目录名为16进制的数字；<br><code>client_body_temp_path /var/tmp/client_body 1 2 2</code><br>1 1级目录占1位16进制，即2^4=16个目录 0-f<br>2 2级目录占2位16进制，即2^8=256个目录 00-ff<br>2 3级目录占2位16进制，即2^8=256个目录 00-ff</p></blockquote><p>19、limit_rate rate;</p><blockquote><p>限制响应给客户端的传输速率，单位是bytes/second,默认值0表示无限制</p></blockquote><p>20、limit_except method … { … }，仅用于location</p><blockquote><p>限制客户端使用除了指定的请求方法之外的其它方法<br>method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE, OPTIONS, PROPFIND, PROPPATCH, LOCK, UNLOCK, PATCH  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">limit_except GET &#123;</span><br><span class="line">allow <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了GET和HEAD 之外其它方法仅允许192.168.1.0/24网段主机使用</p><p>21、aio on | off | threads[=pool];</p><blockquote><p>是否启用aio功能</p></blockquote><p>22、directio size | off;</p><blockquote><p>当文件大于等于给定大小时，例如directio 4m，同步（直接）写磁盘，而非写缓存</p></blockquote><p>23、open_file_cache off;</p><blockquote><p>open_file_cache max=N [inactive=time];<br>nginx可以缓存以下三种信息：<br>(1) 文件元数据：文件的描述符、文件大小和最近一次的修改时间<br>(2) 打开的目录结构<br>(3) 没有找到的或者没有权限访问的文件的相关信息<br>max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现管理,inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项，将被删除</p></blockquote><p>24、open_file_cache_errors on | off;</p><blockquote><p>是否缓存查找时发生错误的文件一类的信息,默认值为off</p></blockquote><p>25、open_file_cache_min_uses number;</p><blockquote><p>open_file_cache指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项,默认值为1</p></blockquote><p>26、open_file_cache_valid time;</p><blockquote><p>缓存项有效性的检查频率,默认值为60s</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/29/NGINX02/nginx.png&quot; alt=&quot;nginx&quot;&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://lihongda.net/categories/web/"/>
    
    
      <category term="nginx" scheme="http://lihongda.net/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>NGINX01</title>
    <link href="http://lihongda.net/2018/08/28/NGINX01/"/>
    <id>http://lihongda.net/2018/08/28/NGINX01/</id>
    <published>2018-08-27T16:00:00.000Z</published>
    <updated>2018-08-29T06:05:30.568Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/28/NGINX01/nginx.png" alt="nginx">  </p><a id="more"></a><h2 id="I-O介绍"><a href="#I-O介绍" class="headerlink" title="I/O介绍"></a>I/O介绍</h2><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O:"></a>I/O:</h4><ul><li>网络I: 本质是socket读取</li><li>磁盘IO: 硬盘上的读写 </li></ul><h4 id="每次IO-都要经由两个阶段"><a href="#每次IO-都要经由两个阶段" class="headerlink" title="每次IO,都要经由两个阶段"></a>每次IO,都要经由两个阶段</h4><ul><li>将数据从磁盘文件先加载至内核内存空间（缓冲区），等待数据准备完成，时间较长</li><li>将数据从内核缓冲区复制到用户空间的进程的内存中，时间较短</li></ul><h4 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h4><ul><li><p>同步/异步：关注的是消息通信机制 </p><ul><li>同步：synchronous，调用者等待被调用者返回消息，才能继续执行</li><li>asynchronous，被调用者通过状态、通知或回调机制主动通知调用者被调用者的运行状态</li></ul></li><li><p>阻塞/非阻塞：关注调用者在等待结果返回之前所处的状态</p><ul><li>阻塞：blocking，指IO操作需要彻底完成后才返回到用户空间，调用结果返回之前，调用者被挂起</li><li>非阻塞：nonblocking，指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成，最终的调用结果返回之前，调用者不会被挂起</li></ul></li><li><p>I/O模型：阻塞型、非阻塞型、复用型、信号驱动型、异步</p></li></ul><h4 id="同步阻塞模型"><a href="#同步阻塞模型" class="headerlink" title="同步阻塞模型"></a>同步阻塞模型</h4><p><img src="/2018/08/28/NGINX01/同步阻塞.png" alt="同步阻塞"></p><ul><li>同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞</li><li>用户线程通过系统调用read发起IO读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作</li><li>用户需要等待read将数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够</li></ul><h4 id="同步非阻塞模型"><a href="#同步非阻塞模型" class="headerlink" title="同步非阻塞模型"></a>同步非阻塞模型</h4><p><img src="/2018/08/28/NGINX01/同步非阻塞.png" alt="同步非阻塞"></p><ul><li>用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。即 “轮询”机制</li><li>整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源</li><li>是比较浪费CPU的方式，一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性</li></ul><h4 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h4><p><img src="/2018/08/28/NGINX01/IO复用模型.png" alt="IO复用模型"></p><ul><li>多个连接共用一个等待机制，本模型会阻塞进程，但是进程是阻塞在select或者poll这两个系统调用上，而不是阻塞在真正的IO操作上</li><li>用户首先将需要进行IO操作添加到select中，继续执行做其他的工作（异步），同时等待select系统调用返回。当数据到达时，IO被激活，select函数返回。用户线程正式发起read请求，读取数据并继续执行</li><li>从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视IO，以及调用select函数的额外操作，效率更差。且阻塞了两次，但是第一次阻塞在select上时，select可以监控多个IO上是否已有IO操作准备就绪，即可达到在同一个线程内同时处理多个IO请求的目的。而不像阻塞IO那种，一次只能监控一个IO</li><li>虽然上述方式允许单线程内处理多个IO请求，但是每个IO请求的过程还是阻塞的（在select函数上阻塞），平均时间甚至比同步阻塞IO模型还要长。如果用户线程只是注册自己需要的IO请求，然后去做自己的事情，等到数据到来时再进行处理，则可以提高CPU的利用率</li><li>IO多路复用是最常使用的IO模型，但是其异步程度还不够“彻底”，因它使用了会阻塞线程的select系统调用。因此IO多路复用只能称为异步阻塞IO模型，而非真正的异步IO.</li></ul><h4 id="多路I-O复用"><a href="#多路I-O复用" class="headerlink" title="多路I/O复用"></a>多路I/O复用</h4><ul><li>IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，就通知该进程</li><li>IO多路复用适用如下场合：<ul><li>当客户端处理多个描述符时（一般是交互式输入和网络套接口），必须使用I/O复用</li><li>当一个客户端同时处理多个套接字时，此情况可能的但很少出现</li><li>当一个TCP服务器既要处理监听套接字，又要处理已连接套接字，一般也要用到I/O复用</li><li>当一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用</li><li>当一个服务器要处理多个服务或多个协议，一般要使用I/O复用</li></ul></li></ul><h4 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h4><p><img src="/2018/08/28/NGINX01/信号驱动.png" alt="信号驱动"></p><ul><li>信号驱动IO：signal-drivenI/O</li><li>用户进程可以通过sigaction系统调用注册一个信号处理程序，然后主程序可以继续向下执行，当有IO操作准备就绪时，由内核通知触发一个SIGIO信号处理程序执行，然后将用户进程所需要的数据从内核空间拷贝到用户空间</li><li>此模型的优势在于等待数据报到达期间进程不被阻塞。用户主程序可以继续执行，只要等待来自信号处理函数的通知</li><li>该模型并不常用</li></ul><h4 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h4><p><img src="/2018/08/28/NGINX01/异步IO.png" alt="异步IO"></p><ul><li>异步IO与信号驱动IO最主要的区别是信号驱动IO是由内核通知何时可以进行IO操作，而异步IO则是由内核告诉用户线程IO操作何时完成。信号驱动IO当内核通知触发信号处理程序时，信号处理程序还需要阻塞在从内核空间缓冲区拷贝数据到用户空间缓冲区这个阶段，而异步IO直接是在第二个阶段完成后，内核直接通知用户线程可以进行后续操作了</li><li>相比于IO多路复用模型，异步IO并不十分常用，不少高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构基本可以满足需求。目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）</li></ul><h4 id="五种IO模型"><a href="#五种IO模型" class="headerlink" title="五种IO模型"></a>五种IO模型</h4><p><img src="/2018/08/28/NGINX01/五种IO模型.png" alt="五种IO模型"></p><h4 id="I-O模型的具体实现"><a href="#I-O模型的具体实现" class="headerlink" title="I/O模型的具体实现"></a>I/O模型的具体实现</h4><ul><li>Select：Linux实现对应，I/O复用模型，BSD4.2最早实现</li><li>Poll：Linux实现，对应I/O复用模型，System V unix最早实现</li><li>Epoll：Linux实现，对应I/O复用模型，具有信号驱动I/O模型的某些特性</li><li>Kqueue：FreeBSD实现，对应I/O复用模型，具有信号驱动I/O模型某些特性.</li><li>/dev/poll：SUN的Solaris实现，对应I/O复用模型，具有信号驱动I/O模型的某些特性</li><li>Iocp Windows实现，对应第5种（异步I/O）模型</li></ul><h4 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select/poll/epoll"></a>select/poll/epoll</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">select</th><th style="text-align:center">poll</th><th style="text-align:center">epoll</th></tr></thead><tbody><tr><td style="text-align:left">操作方式</td><td style="text-align:center">遍历</td><td style="text-align:center">遍历</td><td style="text-align:center">回调</td></tr><tr><td style="text-align:left">底层实现</td><td style="text-align:center">数组</td><td style="text-align:center">链表</td><td style="text-align:center">哈希表</td></tr><tr><td style="text-align:left">IO效率</td><td style="text-align:center">每次调用都进行线性时间复杂度为O(n)</td><td style="text-align:center">每次调用都进行线性遍历时间复杂度为O(n)</td><td style="text-align:center">时间通知方式，fd就绪系统注册的回调函数就会被调用，将就绪的fd放到rdlist里面，时间复杂度为O(1)</td></tr><tr><td style="text-align:left">最大连接数</td><td style="text-align:center">1024(X86)或2048(X64)</td><td style="text-align:center">无上限</td><td style="text-align:center">无上限</td></tr><tr><td style="text-align:left">fd拷贝</td><td style="text-align:center">每次调用select,都需要把fd集合从用户状态拷贝到内核态</td><td style="text-align:center">每次调用poll，都需要把fd集合从用户态拷贝到内核态</td><td style="text-align:center">调用expoll_ctl时拷贝进内核并保存，之后每次epoll_wait不拷贝</td></tr></tbody></table><ul><li>Select:POSIX所规定，目前几乎在所有的平台上支持，其良好跨平台支持也是<br>它的一个优点，本质上是通过设置或者检查存放fd标志位的数据结构来进行下<br>一步处理</li><li><p>缺点</p><ul><li>单个进程可监视的fd数量被限制，即能监听端口的数量有限cat /proc/sys/fs/file-max </li><li>对socket是线性扫描，即采用轮询的方法，效率较低</li><li>select 采取了内存拷贝方法来实现内核将FD消息通知给用户空间，这样一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大</li></ul></li><li><p>poll</p></li><li><p>本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态</p></li><li>其没有最大连接数的限制，原因是它是基于链表来存储的</li><li>大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义</li><li>poll特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd</li><li><p>边缘触发：只通知一次</p></li><li><p>epoll：在Linux 2.6内核中提出的select和poll的增强版本支持水平触发LT和边缘触发ET，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就需态，并且只会通知一次</p><ul><li>使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知</li></ul></li><li>优点:<ul><li>没有最大并发连接的限制：能打开的FD的上限远大于1024(1G的内存能监听约10万个端口)</li><li>效率提升：非轮询的方式，不会随着FD数目的增加而效率下降；只有活跃可用的FD才会调用callback函数，即epoll最大的优点就在于它只管理“活跃”的连接，而跟连接总数无关</li><li>内存拷贝，利用mmap(Memory Mapping)加速与内核空间的消息传递；即epoll使用mmap减少复制开销</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/28/NGINX01/nginx.png&quot; alt=&quot;nginx&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://lihongda.net/categories/web/"/>
    
    
      <category term="nginx" scheme="http://lihongda.net/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务2</title>
    <link href="http://lihongda.net/2018/08/27/FTP%E6%9C%8D%E5%8A%A12/"/>
    <id>http://lihongda.net/2018/08/27/FTP服务2/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-08-27T13:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/27/FTP服务2/ftp图标.jpg" alt="ftp图标">   </p><a id="more"></a>  <h2 id="实现基于文件验证的vsftpd虚拟用户"><a href="#实现基于文件验证的vsftpd虚拟用户" class="headerlink" title="实现基于文件验证的vsftpd虚拟用户"></a>实现基于文件验证的vsftpd虚拟用户</h2><h4 id="1、创建用户数据库文件"><a href="#1、创建用户数据库文件" class="headerlink" title="1、创建用户数据库文件"></a>1、创建用户数据库文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vusers.txt</span><br><span class="line">    wang</span><br><span class="line">    wangpass</span><br><span class="line">    mage</span><br><span class="line">    magepass</span><br><span class="line">cd /etc/vsftpd/</span><br><span class="line">db_load -T -t hash -f vusers.txt vusers.db</span><br><span class="line">chmod 600 vusers.db</span><br></pre></td></tr></table></figure><h4 id="2、创建用户和访问FTP目录"><a href="#2、创建用户和访问FTP目录" class="headerlink" title="2、创建用户和访问FTP目录"></a>2、创建用户和访问FTP目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /var/ftproot -s /sbin/nologin vuser</span><br><span class="line">chmod +rx /var/ftproot/</span><br></pre></td></tr></table></figure><p>Centos7 还需要执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod -w /var/ftproot/</span><br><span class="line">mkdir /var/ftproot/upload</span><br><span class="line">setfacl -m u:vuser:rwx /var/ftproot/upload</span><br></pre></td></tr></table></figure><h4 id="3、创建pam配置文件"><a href="#3、创建pam配置文件" class="headerlink" title="3、创建pam配置文件"></a>3、创建pam配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/vsftpd.db</span><br><span class="line">auth required pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line">account required pam_userdb.so db=/etc/vsftpd/vusers</span><br></pre></td></tr></table></figure><h4 id="4、指定pam配置文件"><a href="#4、指定pam配置文件" class="headerlink" title="4、指定pam配置文件"></a>4、指定pam配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">guest_enable=YES </span><br><span class="line">guest_username=vuser</span><br><span class="line">pam_service_name=vsftpd.db</span><br></pre></td></tr></table></figure><h4 id="5、SELinux设置："><a href="#5、SELinux设置：" class="headerlink" title="5、SELinux设置："></a>5、SELinux设置：</h4><p> 禁用SELinux 或者 <code>setsebool -P ftpd_full_access 1</code></p><h4 id="6、虚拟用户建立独立的配置文件"><a href="#6、虚拟用户建立独立的配置文件" class="headerlink" title="6、虚拟用户建立独立的配置文件"></a>6、虚拟用户建立独立的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mdkir /etc/vsftpd/vusers.d/ 创建配置文件存放的路径</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers.d/</span><br></pre></td></tr></table></figure><p>cd /etc/vsftpd/vusers.d/ 进入此目录</p><h4 id="7、允许wang用户可读写，其它用户只读"><a href="#7、允许wang用户可读写，其它用户只读" class="headerlink" title="7、允许wang用户可读写，其它用户只读"></a>7、允许wang用户可读写，其它用户只读</h4><p><code>vim wang</code> 创建各用户自已的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure><p><code>vim mage</code> 创建各用户自已的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/ftproot 登录目录改变至指定的目录</span><br></pre></td></tr></table></figure><h2 id="实现基于MYSQL验证的vsftpd虚拟用户"><a href="#实现基于MYSQL验证的vsftpd虚拟用户" class="headerlink" title="实现基于MYSQL验证的vsftpd虚拟用户"></a>实现基于MYSQL验证的vsftpd虚拟用户</h2><blockquote><h3 id="说明：本实验在两台CentOS主机上实现，一台做为FTP服务器，一台做数据库服务器"><a href="#说明：本实验在两台CentOS主机上实现，一台做为FTP服务器，一台做数据库服务器" class="headerlink" title="说明：本实验在两台CentOS主机上实现，一台做为FTP服务器，一台做数据库服务器"></a>说明：本实验在两台CentOS主机上实现，一台做为FTP服务器，一台做数据库服务器</h3></blockquote><h4 id="1、在数据库服务器上安装包："><a href="#1、在数据库服务器上安装包：" class="headerlink" title="1、在数据库服务器上安装包："></a>1、在数据库服务器上安装包：</h4><ul><li><p>Centos7：在数据库服务器上安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum –y install mariadb-server</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure></li><li><p>Centos6：在数据库服务器上安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum –y install mysql-server</span><br></pre></td></tr></table></figure></li><li><p>在FTP服务器上安装vsftpd和pam_mysql包 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">centos6：pam_mysql由epel6的源中提供</span><br><span class="line">yum install vsftpd pam_mysql</span><br></pre></td></tr></table></figure></li><li><p>centos7：无对应rpm包，需手动编译安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">yum -y install mariadb-devel pam-devel vsftpd</span><br><span class="line">下载pam_mysql-0.7RC1.tar.gz</span><br><span class="line">ftp://172.16.0.1/pub/Sources/sources/pam/</span><br><span class="line">tar xvf pam_mysql-0.7RC1.tar.gz</span><br><span class="line">cd pam_mysql-0.7RC1/</span><br><span class="line">./configure --with-pam-mods-dir=/lib64/security --with-mysql=/usr --with-pam=/usr</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="2、在数据库服务器上创建虚拟用户账号"><a href="#2、在数据库服务器上创建虚拟用户账号" class="headerlink" title="2、在数据库服务器上创建虚拟用户账号"></a>2、在数据库服务器上创建虚拟用户账号</h4><ul><li>建立存储虚拟用户数据库和连接的数据库用户</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE vsftpd;</span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure><p>ftp服务和mysql不在同一主机：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT ON vsftpd.* TO </span><br><span class="line">vsftpd@<span class="string">'172.16.%.%'</span> IDENTIFIED BY <span class="string">'magedu'</span>;</span><br></pre></td></tr></table></figure></p><p>ftp服务和mysql在同一主机：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT ON vsftpd.* TO </span><br><span class="line">vsftpd@localhost IDENTIFIED BY <span class="string">'magedu'</span>;</span><br><span class="line">mysql&gt; GRANT SELECT ON vsftpd.* TO </span><br><span class="line">vsftpd@<span class="string">'127.0.0.1'</span> IDENTIFIED BY <span class="string">'magedu'</span>;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p><ul><li>准备相关表</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE vsftpd;</span><br><span class="line">Mysql&gt; SHOW TABLES;</span><br><span class="line">mysql&gt; CREATE TABLE users (</span><br><span class="line">id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,</span><br><span class="line">name CHAR(<span class="number">50</span>) BINARY NOT NULL,</span><br><span class="line">password CHAR(<span class="number">48</span>) BINARY NOT NULL</span><br><span class="line">);</span><br><span class="line">mysql&gt;DESC users;</span><br></pre></td></tr></table></figure><p>测试连接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uvsftpd -h <span class="number">172.16</span><span class="number">.200</span><span class="number">.200</span> -pmagedu</span><br><span class="line">mysql&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure></p><ul><li>添加虚拟用户 </li></ul><p>根据需要添加所需要的用户，为了安全应该使用PASSWORD函数加密其密码后<br>存储  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;DESC users;</span><br><span class="line">mysql&gt; INSERT INTO users(name,password) </span><br><span class="line">values(‘wang<span class="string">',password('</span>magedu<span class="string">'));</span></span><br><span class="line"><span class="string">mysql&gt; INSERT INTO users(name,password) </span></span><br><span class="line"><span class="string">values(‘mage'</span>,password(<span class="string">'magedu'</span>));</span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br></pre></td></tr></table></figure><h4 id="3、在FTP服务器上配置vsftpd服务"><a href="#3、在FTP服务器上配置vsftpd服务" class="headerlink" title="3、在FTP服务器上配置vsftpd服务"></a>3、在FTP服务器上配置vsftpd服务</h4><ul><li>在FTP服务器上建立pam认证所需文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pam.d/vsftpd.mysql 添加如下两行</span><br><span class="line">auth required pam_mysql.so user=vsftpd passwd=magedu host=mysqlserver db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br><span class="line">account required pam_mysql.so user=vsftpd passwd=magedu host=mysqlserver db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br></pre></td></tr></table></figure><blockquote><p>crypt是加密方式，0表示不加密，1表示crypt(3)加密，2表示使用mysql password()函数加密，3表示md5加密，4表示sha1加密</p></blockquote><blockquote><p>auth       表示认证<br>account    验证账号密码正常使用<br>required   表示认证要通过<br>pam_mysql.so模块是默认的相对路径，是相对/lib64/security/路径而言，也可以写绝<br>对路径；后面为给此模块传递的参数<br>user=vsftpd为登录mysql的用户<br>passwd=magedu 登录mysql的的密码<br>host=mysqlserver mysql服务器的主机名或ip地址<br>db=vsftpd 指定连接msyql的数据库名称<br>table=users 指定连接数据库中的表名<br>usercolumn=name 当做用户名的字段<br>passwdcolumn=password 当做用户名字段的密码<br>crypt=2 密码的加密方式为mysql password()函数加密</p></blockquote><ul><li>建立相应用户和修改vsftpd配置文件，使其适应mysql认证  </li></ul><p>建立虚拟用户映射的系统用户及对应的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -d /var/ftproot vuser</span><br><span class="line">chmod 555 /var/ftproot centos7 需除去ftp根目录的写权限</span><br><span class="line">mkdir /var/ftproot/&#123;upload,pub&#125;</span><br><span class="line">setfacl –m u:vuser:rwx /var/ftproot/upload</span><br></pre></td></tr></table></figure></p><p>确保/etc/vsftpd.conf中已经启用了以下选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES</span><br></pre></td></tr></table></figure></p><p>添加下面两项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vuser</span><br></pre></td></tr></table></figure></p><p>修改下面一项，原系统用户无法登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pam_service_name=vsftpd.mysql</span><br></pre></td></tr></table></figure></p><h4 id="4、启动vsftpd服务"><a href="#4、启动vsftpd服务" class="headerlink" title="4、启动vsftpd服务"></a>4、启动vsftpd服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start;systemctl start vsftpd</span><br><span class="line">chkconfig vsftpd on;systemctl enable vsftpd</span><br></pre></td></tr></table></figure><p>查看端口开启情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnlp |grep :21</span><br></pre></td></tr></table></figure></p><h4 id="5、Selinux相关设置：在FTP服务器上执行"><a href="#5、Selinux相关设置：在FTP服务器上执行" class="headerlink" title="5、Selinux相关设置：在FTP服务器上执行"></a>5、Selinux相关设置：在FTP服务器上执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">restorecon -R /lib64/security</span><br><span class="line">setsebool -P ftpd_connect_db 1</span><br><span class="line">setsebool -P ftp_home_dir 1</span><br><span class="line">chcon -R -t public_content_rw_t /var/ftproot/</span><br></pre></td></tr></table></figure><h4 id="6、测试：利用FTP客户端工具-以虚拟用户登录验证结果"><a href="#6、测试：利用FTP客户端工具-以虚拟用户登录验证结果" class="headerlink" title="6、测试：利用FTP客户端工具,以虚拟用户登录验证结果"></a>6、测试：利用FTP客户端工具,以虚拟用户登录验证结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail /var/log/secure</span><br></pre></td></tr></table></figure><h4 id="7、在FTP服务器上配置虚拟用户具有不同的访问权限"><a href="#7、在FTP服务器上配置虚拟用户具有不同的访问权限" class="headerlink" title="7、在FTP服务器上配置虚拟用户具有不同的访问权限"></a>7、在FTP服务器上配置虚拟用户具有不同的访问权限</h4><p>vsftpd可以在配置文件目录中为每个用户提供单独的配置文件以定义其ftp服务访<br>问权限，每个虚拟用户的配置文件名同虚拟用户的用户名。配置文件目录可以是任<br>意未使用目录，只需要在vsftpd.conf指定其路径及名称即可</p><ul><li>配置vsftpd为虚拟用户使用配置文件目录  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">添加如下选项</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers_config</span><br></pre></td></tr></table></figure><ul><li>创建所需要目录，并为虚拟用户提供配置文件 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/vsftpd/vusers_config/</span><br><span class="line">cd /etc/vsftpd/vusers_config/</span><br><span class="line">touch wang mage</span><br></pre></td></tr></table></figure><ul><li>配置虚拟用户的访问权限</li></ul><p>虚拟用户对vsftpd服务的访问权限是通过匿名用户的相关指令进行的。如<br>果需要让用户wang具有上传文件的权限，可以修改/etc/vsftpd/vusers_config/wang文件，在里面添加如下选项并设置为YES即可,只读则设为NO</p><p>注意：需确保对应的映射用户对于文件系统有写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anon_upload_enable=&#123;YES|NO&#125;</span><br><span class="line">anon_mkdir_write_enable=&#123;YES|NO&#125;</span><br><span class="line">anon_other_write_enable=&#123;YES|NO&#125;</span><br><span class="line">local_root=/ftproot 登录目录改变至指定的目录</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/27/FTP服务2/ftp图标.jpg&quot; alt=&quot;ftp图标&quot;&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://lihongda.net/categories/service/"/>
    
    
      <category term="ftp" scheme="http://lihongda.net/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>iptables3</title>
    <link href="http://lihongda.net/2018/08/27/iptables3/"/>
    <id>http://lihongda.net/2018/08/27/iptables3/</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-08-27T09:54:21.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/27/iptables3/防火墙.jpg" alt="防火墙"></p><a id="more"></a><h2 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h2><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><ul><li>基本：通用的，PARAMETERS</li><li>扩展：需加载模块，MATCH EXTENTIONS</li></ul><p>1、 基本匹配条件：无需加载模块，由iptables/netfilter自行提供  </p><p><code>-s,--source address[/mask]</code>: 源ip地址或范围<br><code>-d, --destination address[/mask][,...]</code>：目标IP地址或范围<br><code>-p, --protocol protocol</code>:指定协议，可使用数字如0（all）protocol: tcp, udp, icmp, icmpv6, udplite,esp, ah, sctp, mh or all 参看：/etc/protocols<br><code>-i, --in-interface name</code>:  报文流入的接口；只能应用于数据报文流入环节，只应用于<br>INPUT、FORWARD、PREROUTING链<br><code>-o, --out-interface name</code>:  报文流出的接口；只能应用于数据报文流出的环节，只应用<br>于FORWARD、OUTPUT、POSTROUTING链  </p><p>2、 扩展匹配条件：需要加载扩展模块（/usr/lib64/xtables/*.so），方可生效</p><p>  查看帮助 <code>man iptables-extensions</code> </p><ul><li><p>隐式扩展：在使用-p选项指明了特定的协议时，无需再用-m选项指明扩展模块的扩展<br>机制，不需要手动加载扩展模块  </p><ul><li>[!] –source-port, –sport port[:port]：匹配报文源端口,可为端口范围</li><li>[!] –destination-port,–dport port[:port]：匹配报文目标端口,可为范围</li><li>[!] –tcp-flags mask comp<br>mask 需检查的标志位列表，用,分隔 例如 SYN,ACK,FIN,RST<br>comp 在mask列表中必须为1的标志位列表，无指定则必须为0，用,分隔<br>示例：<br>–tcp-flags SYN,ACK,FIN,RST SYN 表示要检查的标志位为<br>SYN,ACK,FIN,RST四个，其中SYN必须为1，余下的必须为0<br>–tcp-flags SYN,ACK,FIN,RST SYN,ACK<br>–tcp-flags ALL ALL<br>–tcp_flags ALL NONE<br>–syn：用于匹配第一次握手,相当于：–tcp-flags SYN,ACK,FIN,RST SYN</li></ul><h4 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h4><p>[!] –source-port, –sport port[:port]：匹配报文的源端口；可以是端口<br>范围<br>[!] –destination-port,–dport port[:port]：匹配报文的目标端口；可以<br>是端口范围</p><h4 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h4><p>[!] –icmp-type {type[/code]|typename}<br>type/code 0/0 echo-reply icmp应答 8/0 echo-request icmp请求</p></li><li><p>显式扩展：：必须使用-m选项指明要调用的扩展模块的扩展机制，要手动加载<br>扩展模块 [-m matchname [per-match-options]]<br>处理动作：-j targetname [per-target-option</p><ul><li>简单： ACCEPT，DROP</li><li>扩展： <ul><li>REJECT：–reject-with:icmp-port-unreachable默认</li><li>RETURN：返回调用链</li><li>REDIRECT：端口重定向</li><li>LOG：记录日志，</li><li>dmesgMARK：做防火墙标记</li><li>DNAT：目标地址转换</li><li>SNAT：源地址转换</li><li>MASQUERADE：地址伪装 或者自定义链    </li></ul></li></ul><p>使用帮助：<br>  CentOS 6: <code>man iptables</code><br>  CentOS 7: <code>man iptables-extensions</code>    </p></li></ul><p>1、 multiport扩展<br>    以离散方式定义多端口匹配,最多指定15个端口  </p><ul><li>[!] –source-ports,–sports port[,port|,port:port]…指定多个源端口</li><li>[!] –destination-ports,–dportsport[,port|,port:port]…指定多个目标端口</li><li>[!] –ports port[,port|,port:port]…多个源或目标端口</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 172.16.0.0/16 -d 172.16.100.10 -p tcp -m multiport --dports 20:22,80 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>2、 iprange扩展  </p><p> 指明连续的（但一般不是整个网络）ip地址范围<br> [!] –src-range from[-to] 源IP地址范围<br> [!] –dst-range from[-to] 目标IP地址范围  </p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -d 172.16.1.100 -p tcp --dport 80 -m iprange --srcrange 172.16.1.5-172.16.1.10 -j DROP</span><br></pre></td></tr></table></figure></p><p>3、 mac扩展<br>    指明源MAC地址<br>    适用于：PREROUTING, FORWARD，INPUT chains<br>    [!] –mac-source XX:XX:XX:XX:XX:XX<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 172.16.0.100 -m mac --mac-source 00:50:56:12:34:56 -j ACCEPT  </span><br><span class="line">iptables -A INPUT -s 172.16.0.100 -j REJECT</span><br></pre></td></tr></table></figure></p><p>4、 string扩展<br>    对报文中的应用层数据做字符串模式匹配检测<br>    –algo {bm|kmp}：字符串匹配检测算法<br>    bm：Boyer-Moore<br>    kmp：Knuth-Pratt-Morris<br>    –from offset 开始偏移<br>    –to offset 结束偏移<br>    [!] –string pattern：要检测的字符串模式<br>    [!] –hex-string pattern：要检测字符串模式，16进制格式  </p><p> 示例：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -s 172.16.100.10 -d 0/0 -p tcp --sport 80 -m string --algo bm --string “google&quot; -j REJECT</span><br></pre></td></tr></table></figure></p><p>5、 time 扩展<br>    根据将报文到达的时间与指定的时间范围进行匹配<br>    –datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]] 日期<br>    –datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]<br>    –timestart hh:mm[:ss] 时间<br>    –timestop hh:mm[:ss]<br>    [!] –monthdays day[,day…] 每个月的几号<br>    [!] –weekdays day[,day…] 星期几<br>   –kerneltz：内核时区，不建议使用，CentOS7系统默认为UTC<br>   注意： centos6 不支持kerneltz ，–localtz指定本地时区(默认)<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 172.16.0.0/16 -d 172.16.100.10 -p tcp --dport 80 -m time --timestart 14:30 --timestop 18:30 --weekdays Sat,Sun --kerneltz -j DROP</span><br></pre></td></tr></table></figure></p><p>6、 connlimit扩展<br>    根据每客户端IP做并发连接数数量匹配<br>    可防止CC(Challenge Collapsar挑战黑洞)攻击<br>    –connlimit-upto n：连接的数量小于等于n时匹配<br>    –connlimit-above n：连接的数量大于n时匹配<br>    通常分别与默认的拒绝或允许策略配合使用</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -d 172.16.100.10 -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT</span><br></pre></td></tr></table></figure></p><p>7、 limit扩展<br>    基于收发报文的速率做匹配<br>    令牌桶过滤器<br>    –limit rate[/second|/minute|/hour|/day]<br>    –limit-burst number<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -d 172.16.100.10 -p icmp --icmp-type 8 -m limit --limit 10/minute -- limit-burst 5 -j ACCEPT  </span><br><span class="line">iptables -I INPUT 2 -p icmp -j REJECT</span><br></pre></td></tr></table></figure></p><p>8、 state扩展<br>    状态有如下几种：<br>    NEW：新发出请求；连接追踪信息库中不存在此连接的相关信息条目，因此，将其识别为第一次发出的请求<br>    ESTABLISHED：NEW状态之后，连接追踪信息库中为其建立的条目失效之前期间内所进行的通信状态<br>    RELATED：新发起的但与已有连接相关联的连接，如：ftp协议中的数据连接与命令连接之间的关系<br>    INVALID：无效的连接，如flag标记不正确<br>    UNTRACKED：未进行追踪的连接，如raw表中关闭追踪</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -d 172.16.1.10 -p tcp -m multiport --dports 22,80 -m state -- state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -s 172.16.1.10 -p tcp -m multiport --sports 22,80 -m state -- state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><p>已经追踪到的并记录下来的连接信息库 /proc/net/nf_conntrack<br>调整连接追踪功能所能够容纳的最大连接数量 /proc/sys/net/nf_conntrack_max<br>不同的协议的连接追踪时长 /proc/sys/net/netfilter/<br>注意：CentOS7 需要加载模块： modprobe nf_conntrack<br>iptables的链接跟踪表最大容量为/proc/sys/net/nf_conntrack_max，各种状态的超时链接会从表中删除；当模板满载时，后续连接可能会超时解决方法两个：<br>  (1) 加大nf_conntrack_max 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.nf_conntrack_max = 393216</span><br><span class="line">net.netfilter.nf_conntrack_max = 393216</span><br></pre></td></tr></table></figure><p>  (2) 降低 nf_conntrack timeout时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established = 300</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120</span><br><span class="line">iptables -t nat -L -n</span><br></pre></td></tr></table></figure></p><h3 id="开启被动模式的ftp服务"><a href="#开启被动模式的ftp服务" class="headerlink" title="开启被动模式的ftp服务"></a>开启被动模式的ftp服务</h3><h4 id="1、装载ftp连接追踪的专用模块："><a href="#1、装载ftp连接追踪的专用模块：" class="headerlink" title="1、装载ftp连接追踪的专用模块："></a>1、装载ftp连接追踪的专用模块：</h4><p>跟踪模块路径：/lib/modules/kernelversion/kernel/net/netfilter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables-config 配置文件</span><br><span class="line">IPTABLES_MODULES=&quot;nf_conntrack_ftp&quot;</span><br><span class="line">modproble nf_conntrack_ftp</span><br></pre></td></tr></table></figure></p><h4 id="2、放行请求报文："><a href="#2、放行请求报文：" class="headerlink" title="2、放行请求报文："></a>2、放行请求报文：</h4><p>命令连接：NEW, ESTABLISHED<br>数据连接：RELATED, ESTABLISHED<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables –I INPUT -d LocalIP -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A INPUT -d LocalIP -p tcp --dport 21 -m state --state NEW -j ACCEPT</span><br></pre></td></tr></table></figure></p><h4 id="3、放行响应报文："><a href="#3、放行响应报文：" class="headerlink" title="3、放行响应报文："></a>3、放行响应报文：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I OUTPUT -s LocalIP -p tcp -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="具体命令"><a href="#具体命令" class="headerlink" title="具体命令"></a>具体命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd</span><br><span class="line">systemctl start vsftpd</span><br><span class="line">modprobe nf_conntrack_ftp</span><br><span class="line">iptables -F</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -m state --state NEW -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line">iptables -vnL</span><br></pre></td></tr></table></figure><h4 id="规则优化"><a href="#规则优化" class="headerlink" title="规则优化"></a>规则优化</h4><blockquote><p>1、 安全放行所有入站和出站的状态为ESTABLISHED状态连接<br>2、 谨慎放行入站的新请求<br>3、 有特殊目的限制访问功能，要在放行规则之前加以拒绝<br>4、 同类规则（访问同一应用），匹配范围小的放在前面，用于特殊处理<br>5、 不同类的规则（访问不同应用），匹配范围大的放在前面<br>6、 应该将那些可由一条规则能够描述的多个规则合并为一条<br>7、 设置默认策略，建议白名单（只放行特定连接）<br>  1） iptables -P，不建议<br>  2） 建议在规则的最后定义规则做为默认策略</p></blockquote><h4 id="保存规则"><a href="#保存规则" class="headerlink" title="保存规则"></a>保存规则</h4><p>保存规则至指定的文件<br>CentOS 6<br><code>service iptables save</code><br>将规则覆盖保存至/etc/sysconfig/iptables文件中<br>CentOS 7 可用下面方法保存规则<br><code>iptables-save &gt; /PATH/TO/SOME_RULES_FILE</code></p><p>CentOS 6：<br>service iptables restart 会自动从/etc/sysconfig/iptables 重新载入规则<br>CentOS 7 重新载入预存规则文件中规则：<br><code>iptables-restore &lt; /PATH/FROM/SOME_RULES_FILE</code><br>-n, –noflush：不清除原有规则<br>-t, –test：仅分析生成规则集，但不提交</p><h4 id="开机自动重载规则文件中的规则："><a href="#开机自动重载规则文件中的规则：" class="headerlink" title="开机自动重载规则文件中的规则："></a>开机自动重载规则文件中的规则：</h4><ul><li>用脚本保存各iptables命令；让此脚本开机后自动运行<br>/etc/rc.d/rc.local文件中添加脚本路径 /PATH/TO/SOME_SCRIPT_FILE</li><li>用规则文件保存各规则，开机时自动载入此规则文件中的规则<br>/etc/rc.d/rc.local文件添加 <code>iptables-restore &lt; /PATH/FROM/IPTABLES_RULES_FILE</code></li><li>自定义Unit File，进行iptables-restore</li></ul><h3 id="网络防火墙"><a href="#网络防火墙" class="headerlink" title="网络防火墙"></a>网络防火墙</h3><h4 id="iptables-netfilter网络防火墙："><a href="#iptables-netfilter网络防火墙：" class="headerlink" title="iptables/netfilter网络防火墙："></a>iptables/netfilter网络防火墙：</h4><p>  (1) 充当网关<br>  (2) 使用filter表的FORWARD链</p><p>  注意的问题：<br>  (1) 请求-响应报文均会经由FORWARD链，要注意规则的方向性<br>  (2) 如果要启用conntrack机制，建议将双方向的状态为ESTABLISHED的报<br>文直接放行</p><h4 id="实验：实现内网ping外网，外网无法Ping内网"><a href="#实验：实现内网ping外网，外网无法Ping内网" class="headerlink" title="实验：实现内网ping外网，外网无法Ping内网"></a>实验：实现内网ping外网，外网无法Ping内网</h4><p>ip_forward功能启用</p><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables  -P FORWARD DROP</span><br><span class="line">iptables  -t filter -A FORWARD -s 192.168.31.0/24 -p icmp --icmp-type 8 -j ACCEPT </span><br><span class="line">iptables  -t filter -A FORWARD -d 192.168.31.0/24 -p icmp --icmp-type 0 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables  -A FORWARD -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables  -t filter -A FORWARD -s 192.168.31.0/24 -p icmp --icmp-type 8 -j ACCEPT </span><br><span class="line">iptables -A FORWARD -j  REJECT</span><br></pre></td></tr></table></figure></p><h4 id="实验：实现从内网可访问外网，外网可访问内网的HTTP和SSH服务"><a href="#实验：实现从内网可访问外网，外网可访问内网的HTTP和SSH服务" class="headerlink" title="实验：实现从内网可访问外网，外网可访问内网的HTTP和SSH服务"></a>实验：实现从内网可访问外网，外网可访问内网的HTTP和SSH服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -A FORWARD  -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -s 192.168.31.0/24 -m state --state NEW -j ACCEPT</span><br><span class="line">iptables -A FORWARD -d 192.168.31.0/24 -p tcp -m multiport  --dports 22,80  -m state --state NEW -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="实验：实现外网可访问内网的单个FTP服务器"><a href="#实验：实现外网可访问内网的单个FTP服务器" class="headerlink" title="实验：实现外网可访问内网的单个FTP服务器"></a>实验：实现外网可访问内网的单个FTP服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables  -P FORWARD DROP</span><br><span class="line">modprobe  nf_conntrack_ftp</span><br><span class="line">iptables -A FORWARD  -m state --state ESTABLISHED,RELATED  -j ACCEPT</span><br><span class="line">iptables -A FORWARD  -p tcp --dport 21 -d 192.168.31.17  -m state --state NEW -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="实验：实现从内网可访问外网的特定服务FTP，HTTP，HTTPS"><a href="#实验：实现从内网可访问外网的特定服务FTP，HTTP，HTTPS" class="headerlink" title="实验：实现从内网可访问外网的特定服务FTP，HTTP，HTTPS"></a>实验：实现从内网可访问外网的特定服务FTP，HTTP，HTTPS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables  -P FORWARD DROP</span><br><span class="line">modprobe  nf_conntrack_ftp</span><br><span class="line">iptables -A FORWARD   -m state --state ESTABLISHED,RELATED  -j ACCEPT</span><br><span class="line">iptables -A FORWARD  -p tcp -m multiport --dports 21,80,443 -s 192.168.31.0/24 -m state --state NEW -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="实验：自定义链实现从内网可访问外网的特定服务FTP-HTTP-HTTPS-DNS-MYSQL"><a href="#实验：自定义链实现从内网可访问外网的特定服务FTP-HTTP-HTTPS-DNS-MYSQL" class="headerlink" title="实验：自定义链实现从内网可访问外网的特定服务FTP,HTTP,HTTPS,DNS,MYSQL"></a>实验：自定义链实现从内网可访问外网的特定服务FTP,HTTP,HTTPS,DNS,MYSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables  -P FORWARD DROP</span><br><span class="line">iptables -N WEB</span><br><span class="line">iptables -A WEB -s 192.168.31.0/24 -p tcp -m multiport --dports 21,80,443,53  -j ACCEPT</span><br><span class="line">iptables -A WEB -s 192.168.31.0/24 -p udp  --dport 53  -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD   -m state --state ESTABLISHED,RELATED  -j ACCEPT</span><br><span class="line">iptables -A FORWARD   -j WEB</span><br><span class="line">iptables -vnL</span><br></pre></td></tr></table></figure><p>修改自定义链，增加MYSQL的访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -R WEB 1  -p tcp -m multiport --dports 21,80,443,3306 -s 192.168.31.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><p>删除自定义链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -vnL</span><br><span class="line">iptables -D FORWARD 2</span><br><span class="line">iptables -F WEB</span><br><span class="line">iptables -X WEB</span><br></pre></td></tr></table></figure><h4 id="实验：SNAT-DNAT-端口转发"><a href="#实验：SNAT-DNAT-端口转发" class="headerlink" title="实验：SNAT DNAT 端口转发"></a>实验：SNAT DNAT 端口转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.31.0/24 -j SNAT --to-source 172.18.0.123</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.31.0/24  -j MASQUERADE</span><br><span class="line">iptables -t nat -A PREROUTING  -d 172.18.0.123  -p tcp --dport 80 -j DNAT --to-destination 192.168.31.17</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/27/iptables3/防火墙.jpg&quot; alt=&quot;防火墙&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://lihongda.net/categories/linux/"/>
    
    
      <category term="iptables" scheme="http://lihongda.net/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务</title>
    <link href="http://lihongda.net/2018/08/20/FTP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://lihongda.net/2018/08/20/FTP服务/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-08-20T10:40:15.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/20/FTP服务/ftp图标.jpg" alt="ftp图标">   </p><a id="more"></a>  <h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><p>1、基于C/S架构<br>2、双通道协议：数据和命令连接<br>3、数据传输格式：二进制（默认）和文本<br>4、两种模式：服务器角度</p><ul><li>主动(POST style)：服务器主动连接<br>命令(控制):客户端：随机port—&gt;服务器：tcp21<br>数据:客户端:随机port&lt;—服务器:tcp20</li><li>被动(PASV style): 客户端主动连接<br>命令(控制):客户端:随机port—&gt;服务器: tcp21<br>数据:客户端：随机port—&gt;服务器:随机port    </li></ul><p>5、服务器被动模式数据端口示例：</p><ul><li>命令通道建立连接的回话中，会协商数据通道要使用的端口</li><li>227(状态码) Entering Passive Mode (ip ,224,59)<br>服务器数据端口为：224*256+59   </li></ul><h2 id="FTP软件介绍"><a href="#FTP软件介绍" class="headerlink" title="FTP软件介绍"></a>FTP软件介绍</h2><p>1、FTP服务器：</p><ul><li>Wu-ftpd,Proftpd,Pureftpd,ServU,IIS(微软)</li><li>vsftpd:Very Secure FTP Daemon,CentOS默认FTP服务器，高速而且稳定  </li></ul><p>2、客户端软件：</p><ul><li>ftp,lftp,lftpget,wget,curl</li><li>lftp -A ftpserver port -A 主动模式 -p 被动模式</li><li>lftp -u username ftpserver</li><li>lftp username@ftpserver</li><li>lftpget <a href="ftp://ftpserver/pub/file" target="_blank" rel="noopener">ftp://ftpserver/pub/file</a></li><li>filezilla(windows),CuteFTP,FlashFXP,LeapFtp</li><li>IE浏览器中输入 <a href="ftp://username:password@ftpserver" target="_blank" rel="noopener">ftp://username:password@ftpserver</a>   </li></ul><h2 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h2><p>1、状态码：</p><ul><li>1XX:信息             125：数据连接打开</li><li>2XX:成功类状态       200：命令OK  230：登录成功</li><li>3XX:补充类           331：用户名OK</li><li>4XX:客户端错误       425：不能打开数据连接</li><li>5XX:服务器错误       530：不能登录  </li></ul><p>2、用户认证:</p><ul><li>匿名用户：ftp,anonymous,对应Linux用户ftp</li><li>系统用户：Linux用户，用户/etc/passwd,密码/etc/shadow</li><li>虚拟用户：特定服务的专用用户，独立的用户密码文件</li><li>nsswitch:network service switch</li><li>pam:用户认证 /lib64/security /etc/pam.d/ /etc/pam.conf  </li></ul><h2 id="vsftp服务"><a href="#vsftp服务" class="headerlink" title="vsftp服务"></a>vsftp服务</h2><p>1、由vsftp包提供，不再由xinetd管理，用户认证配置文件：/etc/pam.d/vsftpd<br>2、服务脚本：/usr/lib/systemd/system/vsftpd.service,/etc/rc.d/init.d/vsftpd<br>3、配置文件：/etc/vsftpd/vsftpd.conf</p><pre><code>- 格式：option=value- 注意：= 前后不要有空格</code></pre><p>4、匿名用户（映射为系统用户ftp ）共享文件位置：/var/ftp<br>5、系统用户共享文件位置：用户家目录<br>6、虚拟用户共享文件位置：为其映射的系统用户的家目录  </p><h2 id="vsftpd服务配置"><a href="#vsftpd服务配置" class="headerlink" title="vsftpd服务配置"></a>vsftpd服务配置</h2><p>1、命令端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_port=21</span><br></pre></td></tr></table></figure><p>2、主动模式端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect_from_port_20=YES  主动模式端口为20</span><br><span class="line">ftp_data_port=20 （默认） 指定主动模式的端口</span><br></pre></td></tr></table></figure><p>3、被动模式端口范围</p><p>linux 客户端默认使用被动模式<br>windows 客户端默认使用主动模式    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=6000 0为随机分配</span><br><span class="line">pasv_max_port=6010</span><br></pre></td></tr></table></figure><p>4、使用当地时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_localtime=YES 使用当地时间（默认为NO，使用GMT）</span><br></pre></td></tr></table></figure><p>5、匿名用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES               支持匿名用户</span><br><span class="line">no_anon_password=YES(默认NO)       匿名用户略过口令检查</span><br><span class="line">anon_world_readable_only (默认YES) 只能下载全部读的文件</span><br><span class="line">anon_upload_enable=YES             匿名上传，注意:文件系统权限</span><br><span class="line">anon_mkdir_write_enable=YES        匿名建目录</span><br><span class="line">anon_umask=077                     指定匿名上传文件的umask</span><br><span class="line">anon_other_write_enable=YES        可删除和修改上传的文件</span><br></pre></td></tr></table></figure><p> 指定上传文件的默认的所有者和权限  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown_uploads=YES(默认NO)</span><br><span class="line">chown_username=wang</span><br><span class="line">chown_upload_mode=0644</span><br></pre></td></tr></table></figure><p>6、linux系统用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guest_enable=YES            所有系统用户都映射成guest用户</span><br><span class="line">guest_username=ftp          配合上面选项才生效，指定guest用户</span><br><span class="line">local_enable=YES            是否允许linux用户登录</span><br><span class="line">write_enable-YES            允许linux用户上传文件</span><br><span class="line">local_umask=022             指定系统用户上传文件的默认权限</span><br><span class="line">local_root=/ftproot guest   用户登录所在目录</span><br></pre></td></tr></table></figure><p>7、禁锢所有系统用户在家目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES（默认NO，不禁锢）禁锢系统用户</span><br></pre></td></tr></table></figure><p>8、禁锢或不禁锢特定的系统用户在家目录中，与上面设置功能相反  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=YES </span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">当chroot_local_user=YES时，则chroot_list中用户不禁锢</span><br><span class="line">当chroot_local_user=NO时，则chroot_list中用户禁锢</span><br></pre></td></tr></table></figure><p>9、vsftpd日志 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dual_log_enable=YES      使用vsftpd日志格式，默认不启用 </span><br><span class="line">vsftpd_log_file=/var/log/vsftpd.log（默认）可自动生成</span><br></pre></td></tr></table></figure><p>10、登录提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftpd_banner=“welcome to mage ftp server&quot;</span><br><span class="line">banner_file=/etc/vsftpd/ftpbanner.txt 优先上面项生效</span><br></pre></td></tr></table></figure><p>11、目录访问提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirmessage_enable=YES (默认)</span><br><span class="line">message_file=.message   默认信息存放在指定目录下.message</span><br></pre></td></tr></table></figure><p>12、使用pam(Pluggable AuthenticationModules)完成用户认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pam_service_name=vsftppam</span><br><span class="line">配置文件:/etc/pam.d/vsftpd/etc/vsftpd/ftpusers 默认文件中用户拒绝登录</span><br></pre></td></tr></table></figure><p>13、是否启用控制用户登录的列表文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=YES                   默认有此设置</span><br><span class="line">userlist_deny=YES(默认值)             黑名单,不提示口令，NO为白名单</span><br><span class="line">userlist_file=/etc/vsftpd/users_list  此为默认值</span><br></pre></td></tr></table></figure><p>14、vsftpd服务指定用户身份运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nopriv_user=nobody (默认值)</span><br></pre></td></tr></table></figure><p>15、连接数限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_clients=0                最大并发连接数</span><br><span class="line">max_per_ip=0                 每个IP同时发起的最大连接数</span><br></pre></td></tr></table></figure><p>16、传输速率：字节/秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anon_max_rate=0              匿名用户的最大传输速率</span><br><span class="line">local_max_rate=0             本地用户的最大传输速率</span><br></pre></td></tr></table></figure><p>17、连接时间：秒为单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=60           主动模式数据连接超时时长</span><br><span class="line">accept_timeout=60            被动模式数据连接超时时长</span><br><span class="line">data_connection_timeout=300  数据连接无数据输超时时长</span><br><span class="line">idle_session_timeout=60      无命令操作超时时长</span><br></pre></td></tr></table></figure><p>18、优先以文本方式传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br></pre></td></tr></table></figure><h2 id="实现基于SSL的FTPS"><a href="#实现基于SSL的FTPS" class="headerlink" title="实现基于SSL的FTPS"></a>实现基于SSL的FTPS</h2><p>1、 查看是否支持SSL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd `which vsftpd` 查看到libssl.so</span><br></pre></td></tr></table></figure><p>2、 创建自签名证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/pki/tls/certs/</span><br><span class="line">make vsftpd.pem</span><br><span class="line">openssl x509 -in vsftpd.pem -noout –text</span><br></pre></td></tr></table></figure><p>3、 配置vsftpd服务支持SSL：/etc/vsftpd/vsftpd.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssl_enable=YES             启用SSL</span><br><span class="line">allow_anon_ssl=NO          匿名不支持SSL</span><br><span class="line">force_local_logins_ssl=YES 本地用户登录加密</span><br><span class="line">force_local_data_ssl=YES   本地用户数据传输加密</span><br><span class="line">rsa_cert_file=/etc/pki/tls/certs/vsftpd.pem</span><br></pre></td></tr></table></figure><p>4、 用filezilla等工具测试</p><h2 id="vsftpd虚拟用户"><a href="#vsftpd虚拟用户" class="headerlink" title="vsftpd虚拟用户"></a>vsftpd虚拟用户</h2><p>1、虚拟用户：</p><blockquote><p>所有虚拟用户会统一映射为一个指定的系统帐号：访问共享位置，即为此系统帐号<br>的家目录<br>各虚拟用户可被赋予不同的访问权限，通过匿名用户的权限控制参数进行指定</p></blockquote><p>2、虚拟用户帐号的存储方式：</p><blockquote><p>文件：编辑文本文件，此文件需要被编码为hash格式<br>  奇数行为用户名，偶数行为密码<br>  db_load -T -t hash -f vusers.txt vusers.db</p></blockquote><blockquote><p>关系型数据库中的表中：</p></blockquote><p>3、实时查询数据库完成用户认证</p><blockquote><p>mysql库：pam要依赖于pam-mysql<br>  /lib64/security/pam_mysql.so<br>  /usr/share/doc/pam_mysql-0.7/README</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/20/FTP服务/ftp图标.jpg&quot; alt=&quot;ftp图标&quot;&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="service" scheme="http://lihongda.net/categories/service/"/>
    
    
      <category term="ftp" scheme="http://lihongda.net/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>iptables2</title>
    <link href="http://lihongda.net/2018/08/19/iptables2/"/>
    <id>http://lihongda.net/2018/08/19/iptables2/</id>
    <published>2018-08-18T16:00:00.000Z</published>
    <updated>2018-08-19T09:14:09.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/19/iptables2/防火墙.jpg" alt="防火墙"></p><a id="more"></a><h2 id="内核中数据包的传输过程"><a href="#内核中数据包的传输过程" class="headerlink" title="内核中数据包的传输过程"></a>内核中数据包的传输过程</h2><ul><li>当一个数据包进入网卡时，数据包首先进入PREROUTING链，内核根据数据包目的IP判断是否需要转送出去</li><li>如果数据包就是进入本机的，数据包就会到达INPUT链。数据包到达INPUT链后，任何进程都会收到它。本机上的程序可以发送数据包，这些数据包经过OUTPUT链，然后到达POSTROUTING链输出</li><li>如果数据包是要转发出去的，且内核允许转发，数据包就会到达FORWARD链，然后到达POSTROUTING链输出    </li></ul><h2 id="iptables规则"><a href="#iptables规则" class="headerlink" title="iptables规则"></a>iptables规则</h2><ul><li>规则rule：根据规则的匹配条件尝试匹配报文，对匹配成功的报文根据规则定义的处理动作作出处理   </li></ul><p>1、匹配条件：默认为与条件，同时满足   </p><p>基本匹配：IP,端口,TCP的Flags（SYN,ACK等）<br>扩展匹配：通过复杂高级功能匹配   </p><p>2、处理动作：称为target，跳转目标  </p><ul><li>内建处理动作：ACCEPT,DROP,REJECT,SNAT,DNATMASQUERADE,MARK,LOG…   </li><li>自定义处理动作：自定义chain，利用分类管理复杂情形  </li></ul><p>3、规则要添加在链上，才生效；添加在自定义上不会自动生效   </p><ul><li>链chain：  </li></ul><p>1、内置链：每个内置链对应于一个钩子函数<br>2、自定义链：用于对内置链进行扩展或补充，可实现更灵活的规则组织管理机制；只有Hook钩子调用自定义链时，才生效   </p><h2 id="iptables添加要点"><a href="#iptables添加要点" class="headerlink" title="iptables添加要点"></a>iptables添加要点</h2><ul><li>iptables规则添加时考量点  </li></ul><p>1、要实现那种功能：判断添加在那张表上<br>2、报文流经的路径：判断添加在哪个链上<br>3、报文的流向：判断源和目的<br>4、匹配规则：业务需要</p><ul><li>链上规则的次序，即为检查的次序，因此隐含一定的法则</li></ul><p>1、同类规则（访问同一应用），匹配范围小的放上面<br>2、不同类规则（访问不同应用），匹配到报文频率较大的放上面<br>3、将那些可由一条规则描述的多个规则合并为一个<br>4、设置默认策略</p><h3 id="避免自己定义的规则和系统默认的冲突，建议关闭系统的防火墙"><a href="#避免自己定义的规则和系统默认的冲突，建议关闭系统的防火墙" class="headerlink" title="避免自己定义的规则和系统默认的冲突，建议关闭系统的防火墙"></a>避免自己定义的规则和系统默认的冲突，建议关闭系统的防火墙</h3><p>Centos 7 系统环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systmectl stop firewalld.service        关闭防火墙</span><br><span class="line">systemctl disable firewalld.service     设置开机不启动</span><br></pre></td></tr></table></figure></p><p>Centos 6 系统环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop       关闭防火墙</span><br><span class="line">chkconfig iptables off      设置开机不启动</span><br></pre></td></tr></table></figure></p><h2 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h2><h4 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h4><p><img src="/2018/08/19/iptables2/表规则.png" alt="表规则"></p><h4 id="规则格式"><a href="#规则格式" class="headerlink" title="规则格式"></a>规则格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t table] SUBCOMMAND chain [-m matchname [per-matchoptions]] -j targetname [per-target-options]</span><br></pre></td></tr></table></figure><h4 id="t-table-raw-mangle-nat-filter-默认"><a href="#t-table-raw-mangle-nat-filter-默认" class="headerlink" title="-t table:raw,mangle,nat,[filter]默认"></a>-t table:raw,mangle,nat,[filter]默认</h4><h4 id="链管理"><a href="#链管理" class="headerlink" title="链管理"></a>链管理</h4><blockquote><p>-N：new，自定义一条新的规则链<br>-X：delete，删除自定义的空的规则链<br>-P：Policy，设置默认策略；对filter表中的链默认为ACCEPT，可修改DROP<br>-E：重命名自定义链；引用计数不为0的自定义链不能够重命名，也不能被删除</p></blockquote><h4 id="规则查看"><a href="#规则查看" class="headerlink" title="规则查看"></a>规则查看</h4><blockquote><p>-L：list, 列出指定鏈上的所有规则，本选项须置后<br>-n：numberic，以数字格式显示地址和端口号<br>-v：verbose，详细信息<br>-vv 更详细<br>-x：exactly，显示计数器结果的精确值,而非单位转换后的易读值<br>–line-numbers：显示规则的序号<br>常用组合：–vnL;–vvnxL; –line-numbers<br>-S selected,以iptables-save 命令格式显示链上规则  </p></blockquote><h4 id="规则管理"><a href="#规则管理" class="headerlink" title="规则管理"></a>规则管理</h4><blockquote><p>-A：append，追加<br>-I：insert, 插入，要指明插入至的规则编号，默认为第一条<br>-D：delete，删除<br> (1) 指明规则序号<br> (2) 指明规则本身<br>-R：replace，替换指定链上的指定规则编号<br>-F：flush，清空指定的规则链<br>-Z：zero，置零<br> iptables的每条规则都有两个计数器<br> (1) 匹配到的报文的个数<br> (2) 匹配到的所有报文的大小之和</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/19/iptables2/防火墙.jpg&quot; alt=&quot;防火墙&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://lihongda.net/categories/linux/"/>
    
    
      <category term="iptables2" scheme="http://lihongda.net/tags/iptables2/"/>
    
  </entry>
  
  <entry>
    <title>iptables1</title>
    <link href="http://lihongda.net/2018/08/18/iptables1/"/>
    <id>http://lihongda.net/2018/08/18/iptables1/</id>
    <published>2018-08-18T10:18:39.000Z</published>
    <updated>2018-08-19T09:14:45.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、iptables的基本认识"><a href="#一、iptables的基本认识" class="headerlink" title="一、iptables的基本认识"></a>一、iptables的基本认识</h1><p><img src="/2018/08/18/iptables1/防火墙.jpg" alt="防火墙"></p><a id="more"></a><h3 id="1、Netfilter组件"><a href="#1、Netfilter组件" class="headerlink" title="1、Netfilter组件"></a>1、Netfilter组件</h3><ul><li>内核空间，集成在linux内核中</li><li>扩展各种网络服务的结构化底层框架</li><li>内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING)，而这五个hook function向用户开放，用户可以通过一个命令工具（iptables）向其写入规则</li><li>由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则被分组放在链（chain）上  </li></ul><h3 id="2、-三种报文流向："><a href="#2、-三种报文流向：" class="headerlink" title="2、 三种报文流向："></a>2、 三种报文流向：</h3><ul><li>流入本机：PREROUTING –&gt; INPUT–&gt;用户空间进程</li><li>流出本机：用户空间进程 –&gt;OUTPUT–&gt; POSTROUTING</li><li>转发：PREROUTING –&gt; FORWARD –&gt; POSTROUTING   </li></ul><h1 id="二、iptables的组成"><a href="#二、iptables的组成" class="headerlink" title="二、iptables的组成"></a>二、iptables的组成</h1><h3 id="1、iptables由五个表和五个链以及一些规则组成"><a href="#1、iptables由五个表和五个链以及一些规则组成" class="headerlink" title="1、iptables由五个表和五个链以及一些规则组成"></a>1、iptables由五个表和五个链以及一些规则组成</h3><ul><li>五个表table：filter、nat、mangle、raw、security</li><li>filter表:过滤规则表，根据预定义的规则过滤符合条件的数据包</li><li>nat表:network address translation 地址转换规则表</li><li>mangle:修改数据标记位规则表</li><li>Raw:关闭NAT表上启用的连接跟踪机制，加快封包穿越防火墙速度</li><li>Security：此表用于强制访问控制（MAC）网络规则，由Linux安全模块（如SELinux）实现</li><li>优先级由高到低的顺序为:security –&gt;raw–&gt;mangle–&gt;nat–&gt;filter  </li></ul><h3 id="2、五个内置链chain"><a href="#2、五个内置链chain" class="headerlink" title="2、五个内置链chain"></a>2、五个内置链chain</h3><ul><li>INPUT</li><li>OUTPUT</li><li>FORWARD</li><li>PREROUTING</li><li>POSTROUTING</li></ul><h1 id="三、Netfilter表和链对应关系"><a href="#三、Netfilter表和链对应关系" class="headerlink" title="三、Netfilter表和链对应关系"></a>三、Netfilter表和链对应关系</h1><p><img src="/2018/08/18/iptables1/表和链对应关系.jpg" alt="表和链对应关系"></p><h1 id="四、数据包过滤匹配流程"><a href="#四、数据包过滤匹配流程" class="headerlink" title="四、数据包过滤匹配流程"></a>四、数据包过滤匹配流程</h1><p><img src="/2018/08/18/iptables1/数据包过滤.jpg" alt="匹配流程图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、iptables的基本认识&quot;&gt;&lt;a href=&quot;#一、iptables的基本认识&quot; class=&quot;headerlink&quot; title=&quot;一、iptables的基本认识&quot;&gt;&lt;/a&gt;一、iptables的基本认识&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/08/18/iptables1/防火墙.jpg&quot; alt=&quot;防火墙&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://lihongda.net/categories/linux/"/>
    
    
      <category term="iptables" scheme="http://lihongda.net/tags/iptables/"/>
    
  </entry>
  
</feed>
